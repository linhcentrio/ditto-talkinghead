#!/usr/bin/env python3
"""
üé≠ Ditto Talking Head - One-Click Setup for Google Colab (Secure Version)
T·ª± ƒë·ªông c√†i ƒë·∫∑t v√† kh·ªüi ch·∫°y to√†n b·ªô ·ª©ng d·ª•ng trong m·ªôt l·∫ßn ch·∫°y
"""

import os
import sys
import subprocess
import time
import threading
import json
import requests
from pathlib import Path
from pyngrok import ngrok

# =================== CONSTANTS ===================
REPO_URL = "https://github.com/linhcentrio/ditto-talkinghead.git"
REPO_BRANCH = "colab"
HUGGINGFACE_CONFIG_URL = "https://huggingface.co/digital-avatar/ditto-talkinghead/resolve/main/ditto_cfg/v0.4_hubert_cfg_trt.pkl"
GDRIVE_TRT_MODELS = "https://drive.google.com/drive/folders/1-1qnqy0D9ICgRh8iNY_22j9ieNRC0-zf?usp=sharing"

class DittoSetup:
    def __init__(self):
        self.start_time = time.time()
        self.gpu_capability = 6  # Default
        self.data_root = "./checkpoints/ditto_trt"
        
    def log(self, message, prefix="üé≠"):
        """In log v·ªõi timestamp"""
        elapsed = time.time() - self.start_time
        print(f"[{elapsed:6.1f}s] {prefix} {message}")
        
    def run_command(self, cmd, capture=True, timeout=300, shell=True):
        """Ch·∫°y l·ªánh v·ªõi x·ª≠ l√Ω l·ªói v√† timeout"""
        try:
            result = subprocess.run(
                cmd,
                shell=shell,
                capture_output=capture,
                text=True,
                timeout=timeout
            )
            if result.returncode == 0:
                return True, result.stdout
            else:
                return False, result.stderr
        except subprocess.TimeoutExpired:
            return False, f"Timeout after {timeout}s"
        except Exception as e:
            return False, str(e)
    
    def check_system(self):
        """Ki·ªÉm tra h·ªá th·ªëng v√† GPU"""
        self.log("Ki·ªÉm tra h·ªá th·ªëng...")
        
        # Ki·ªÉm tra GPU
        success, output = self.run_command("nvidia-smi --query-gpu=name,memory.total --format=csv,noheader")
        if success:
            self.log(f"GPU: {output.strip()}")
        else:
            self.log("Kh√¥ng ph√°t hi·ªán GPU", "‚ö†Ô∏è")
            
        # Ki·ªÉm tra PyTorch v√† CUDA
        try:
            import torch
            self.log(f"PyTorch: {torch.__version__}")
            
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
                self.gpu_capability = torch.cuda.get_device_capability()[0]
                
                self.log(f"CUDA: {torch.version.cuda} | GPU: {gpu_name} ({gpu_memory:.1f}GB)")
                self.log(f"GPU Compute Capability: {self.gpu_capability}")
            else:
                self.log("CUDA kh√¥ng kh·∫£ d·ª•ng", "‚ö†Ô∏è")
                
        except ImportError:
            self.log("PyTorch ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t", "‚ùå")
            return False
            
        return True
    
    def install_dependencies(self):
        """C√†i ƒë·∫∑t t·∫•t c·∫£ dependencies"""
        self.log("C√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt...")
        
        # C·∫≠p nh·∫≠t pip
        self.run_command("pip install --upgrade pip setuptools wheel", timeout=180)
        
        # AI Core libraries
        ai_libs = [
            "tensorrt==8.6.1",
            "librosa", "tqdm", "filetype", "imageio", "opencv-python-headless",
            "scikit-image", "cython", "cuda-python", "imageio-ffmpeg", "colored",
            "polygraphy", "numpy==2.0.1"
        ]
        
        # UI and processing libraries
        ui_libs = [
            "streamlit", "fastapi", "uvicorn", "python-multipart", "requests",
            "pysrt", "python-dotenv", "moviepy==2.1.2",
            "openai", "edge-tts", "gradio", "transparent-background", "insightface"
        ]
        
        # Ngrok
        ngrok_libs = ["pyngrok"]
        
        all_libs = ai_libs + ui_libs + ngrok_libs
        
        for lib in all_libs:
            self.log(f"C√†i ƒë·∫∑t {lib}...")
            success, output = self.run_command(f"pip install {lib}", timeout=120)
            if not success:
                self.log(f"L·ªói c√†i ƒë·∫∑t {lib}: {output}", "‚ö†Ô∏è")
        
        # C√†i ƒë·∫∑t FFmpeg
        self.log("C√†i ƒë·∫∑t FFmpeg...")
        self.run_command("apt-get update -qq && apt-get install -y ffmpeg", timeout=180)
        
        # C√†i ƒë·∫∑t libcudnn8 (optional)
        try:
            self.run_command("apt install -y libcudnn8", timeout=60)
        except:
            self.log("Kh√¥ng th·ªÉ c√†i ƒë·∫∑t libcudnn8", "‚ö†Ô∏è")
            
        self.log("Ho√†n th√†nh c√†i ƒë·∫∑t th∆∞ vi·ªán")
        return True
    
    def setup_repository(self):
        """Clone repository v√† setup"""
        self.log("Thi·∫øt l·∫≠p repository...")
        
        # Remove existing directory
        if os.path.exists("ditto-talkinghead"):
            self.run_command("rm -rf ditto-talkinghead")
            
        # Clone repository
        success, output = self.run_command(
            f"git clone --single-branch --branch {REPO_BRANCH} {REPO_URL}",
            timeout=120
        )
        
        if not success:
            self.log(f"L·ªói clone repository: {output}", "‚ùå")
            return False
            
        # Change to project directory
        os.chdir("ditto-talkinghead")
        self.log("Repository ƒë√£ ƒë∆∞·ª£c clone th√†nh c√¥ng")
        
        # Pull latest changes
        self.run_command("git pull")
        
        return True
    
    def download_models(self):
        """T·∫£i models v√† config"""
        self.log("T·∫£i models v√† config...")
        
        # T·∫°o th∆∞ m·ª•c checkpoints
        os.makedirs("checkpoints/ditto_cfg", exist_ok=True)
        
        # T·∫£i config file
        self.log("T·∫£i config file...")
        success, output = self.run_command(
            f"wget -q {HUGGINGFACE_CONFIG_URL} -O checkpoints/ditto_cfg/v0.4_hubert_cfg_trt.pkl"
        )
        
        if not success or not os.path.exists("checkpoints/ditto_cfg/v0.4_hubert_cfg_trt.pkl"):
            self.log("L·ªói t·∫£i config file", "‚ùå")
            return False
            
        self.log("Config file ƒë√£ ƒë∆∞·ª£c t·∫£i")
        
        # T·∫£i TRT models d·ª±a tr√™n GPU capability
        if self.gpu_capability < 8:
            self.log("T·∫£i Non-Ampere TRT models...")
            # C√†i ƒë·∫∑t gdown n·∫øu ch∆∞a c√≥
            self.run_command("pip install --upgrade --no-cache-dir gdown")
            
            # T·∫£i models t·ª´ Google Drive
            success, output = self.run_command(
                f"gdown {GDRIVE_TRT_MODELS} -O ./checkpoints/ditto_trt --folder",
                timeout=600
            )
            
            if success:
                self.data_root = "./checkpoints/ditto_trt"
                self.log("TRT models ƒë√£ ƒë∆∞·ª£c t·∫£i")
            else:
                self.log(f"L·ªói t·∫£i TRT models: {output}", "‚ö†Ô∏è")
                # T·∫°o th∆∞ m·ª•c dummy
                os.makedirs("./checkpoints/ditto_trt", exist_ok=True)
        else:
            self.log("S·ª≠ d·ª•ng Ampere+ models")
            self.data_root = "./checkpoints/ditto_trt_Ampere_Plus"
            os.makedirs(self.data_root, exist_ok=True)
            
        return True
    
    def test_ai_core(self):
        """Test AI Core SDK"""
        self.log("Ki·ªÉm tra AI Core...")
        
        try:
            # Th√™m path ƒë·ªÉ import
            sys.path.insert(0, os.getcwd())
            
            # Ki·ªÉm tra file inference.py
            if not os.path.exists('inference.py'):
                self.log("Kh√¥ng t√¨m th·∫•y inference.py", "‚ö†Ô∏è")
                return False
                
            # Import v√† test SDK
            from inference import StreamSDK
            
            cfg_pkl = "./checkpoints/ditto_cfg/v0.4_hubert_cfg_trt.pkl"
            
            if not os.path.exists(cfg_pkl):
                self.log("Kh√¥ng t√¨m th·∫•y config file", "‚ùå")
                return False
                
            SDK = StreamSDK(cfg_pkl, self.data_root)
            self.log("AI Core SDK kh·ªüi t·∫°o th√†nh c√¥ng")
            return True
            
        except Exception as e:
            self.log(f"L·ªói test AI Core: {str(e)}", "‚ö†Ô∏è")
            return False
    
    def setup_api_keys(self):
        """Thi·∫øt l·∫≠p API keys t·ª´ environment variables"""
        self.log("Thi·∫øt l·∫≠p API keys...")
        
        # L·∫•y keys t·ª´ environment variables
        ngrok_token = os.environ.get('NGROK_TOKEN', '').strip()
        openai_key = os.environ.get('OPENAI_API_KEY', '').strip()
        pexels_key = os.environ.get('PEXELS_API_KEY', '').strip()
        
        # Ki·ªÉm tra Ngrok token (b·∫Øt bu·ªôc)
        if not ngrok_token:
            self.log("Ngrok token kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong environment!", "‚ùå")
            self.log("Vui l√≤ng ch·∫°y cell thi·∫øt l·∫≠p API keys tr∆∞·ªõc", "üí°")
            return False
            
        # Thi·∫øt l·∫≠p Ngrok
        try:
            ngrok.set_auth_token(ngrok_token)
            self.log("Ngrok token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        except Exception as e:
            self.log(f"L·ªói c·∫•u h√¨nh Ngrok: {str(e)}", "‚ùå")
            return False
            
        # Thi·∫øt l·∫≠p OpenAI (t√πy ch·ªçn)
        if openai_key:
            os.environ['OPENAI_API_KEY'] = openai_key
            self.log("OpenAI API key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        else:
            self.log("OpenAI API key kh√¥ng c√≥ (s·∫Ω d√πng Edge TTS)", "‚ÑπÔ∏è")
            
        # Thi·∫øt l·∫≠p Pexels (t√πy ch·ªçn)
        if pexels_key:
            os.environ['PEXELS_API_KEY'] = pexels_key
            self.log("Pexels API key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
        else:
            self.log("Pexels API key kh√¥ng c√≥ (t√πy ch·ªçn)", "‚ÑπÔ∏è")
            
        return True
    
    def start_streamlit_server(self):
        """Kh·ªüi ƒë·ªông Streamlit server"""
        self.log("Kh·ªüi ƒë·ªông Streamlit server...")
        
        # Thi·∫øt l·∫≠p environment variables
        os.environ['STREAMLIT_SERVER_FILE_WATCHER_TYPE'] = 'none'
        os.environ['STREAMLIT_SERVER_HEADLESS'] = 'true'
        os.environ['STREAMLIT_SERVER_PORT'] = '8501'
        
        # Ki·ªÉm tra file run_streamlit.py
        if not os.path.exists("run_streamlit.py"):
            self.log("Kh√¥ng t√¨m th·∫•y run_streamlit.py", "‚ùå")
            return False
            
        # Kh·ªüi ch·∫°y Streamlit trong thread ri√™ng
        def run_streamlit():
            streamlit_cmd = [
                sys.executable, "-m", "streamlit", "run", "run_streamlit.py",
                "--server.port=8501",
                "--server.address=0.0.0.0", 
                "--server.headless=true",
                "--browser.gatherUsageStats=false"
            ]
            
            try:
                subprocess.run(streamlit_cmd, check=True)
            except Exception as e:
                self.log(f"L·ªói Streamlit: {str(e)}", "‚ùå")
                
        streamlit_thread = threading.Thread(target=run_streamlit, daemon=True)
        streamlit_thread.start()
        
        # ƒê·ª£i server kh·ªüi ƒë·ªông
        self.log("ƒê·ª£i server kh·ªüi ƒë·ªông...")
        time.sleep(15)
        
        # Ki·ªÉm tra server
        for i in range(5):
            try:
                response = requests.get("http://localhost:8501", timeout=5)
                if response.status_code == 200:
                    self.log("Streamlit server ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
                    return True
            except:
                self.log(f"Th·ª≠ l·∫ßn {i+1}/5: Server ch∆∞a s·∫µn s√†ng...")
                time.sleep(5)
                
        self.log("Streamlit server kh√¥ng th·ªÉ kh·ªüi ƒë·ªông", "‚ùå")
        return False
    
    def create_ngrok_tunnel(self):
        """T·∫°o Ngrok tunnel"""
        self.log("T·∫°o Ngrok tunnel...")
        
        try:
            # T·∫°o tunnel
            public_url = ngrok.connect(8501, "http")
            
            self.log("=" * 60)
            self.log("üéâ NGROK TUNNEL ƒê√É T·∫†O TH√ÄNH C√îNG!", "‚úÖ")
            self.log("=" * 60)
            self.log(f"üîó Public URL: {public_url}")
            self.log(f"üì± Truy c·∫≠p ·ª©ng d·ª•ng t·∫°i: {public_url}")
            self.log("üí° URL n√†y l√† t·∫°m th·ªùi v√† s·∫Ω thay ƒë·ªïi khi restart")
            self.log("‚èπÔ∏è ƒê·ªÉ d·ª´ng, nh·∫•n Ctrl+C")
            self.log("=" * 60)
            
            # Gi·ªØ script ch·∫°y
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                self.log("ƒêang t·∫Øt ·ª©ng d·ª•ng...")
                ngrok.disconnect(public_url)
                ngrok.kill()
                
            return True
            
        except Exception as e:
            self.log(f"L·ªói t·∫°o Ngrok tunnel: {str(e)}", "‚ùå")
            return False
    
    def run_full_setup(self):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh setup"""
        self.log("üé≠ B·∫ÆT ƒê·∫¶U DITTO TALKING HEAD SETUP")
        self.log("=" * 60)
        
        steps = [
            ("Ki·ªÉm tra h·ªá th·ªëng", self.check_system),
            ("C√†i ƒë·∫∑t dependencies", self.install_dependencies),
            ("Thi·∫øt l·∫≠p repository", self.setup_repository),
            ("T·∫£i models", self.download_models),
            ("Test AI Core", self.test_ai_core),
            ("Thi·∫øt l·∫≠p API keys", self.setup_api_keys),
            ("Kh·ªüi ƒë·ªông Streamlit", self.start_streamlit_server),
            ("T·∫°o Ngrok tunnel", self.create_ngrok_tunnel),
        ]
        
        for step_name, step_func in steps:
            self.log(f"üìã {step_name}...")
            
            try:
                if not step_func():
                    self.log(f"‚ùå L·ªói t·∫°i b∆∞·ªõc: {step_name}")
                    return False
                    
                self.log(f"‚úÖ Ho√†n th√†nh: {step_name}")
                
            except Exception as e:
                self.log(f"‚ùå Exception t·∫°i {step_name}: {str(e)}")
                return False
                
        elapsed = time.time() - self.start_time
        self.log(f"üéâ SETUP HO√ÄN T·∫§T! T·ªïng th·ªùi gian: {elapsed:.1f}s")
        return True

def main():
    """H√†m main"""
    print("üé≠ Ditto Talking Head - One-Click Setup")
    print("=" * 60)
    
    # Ki·ªÉm tra API keys ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a
    ngrok_token = os.environ.get('NGROK_TOKEN', '').strip()
    
    if not ngrok_token:
        print("‚ùå API Keys ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        print("üí° Vui l√≤ng ch·∫°y cell 'Thi·∫øt l·∫≠p API Keys' tr∆∞·ªõc ti√™n")
        print("üîó Cell ƒë√≥ s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c√°ch l·∫•y v√† nh·∫≠p c√°c API keys c·∫ßn thi·∫øt")
        sys.exit(1)
    
    print("‚úÖ API Keys ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p, b·∫Øt ƒë·∫ßu setup...")
    
    # Kh·ªüi t·∫°o v√† ch·∫°y setup
    setup = DittoSetup()
    
    success = setup.run_full_setup()
    
    if not success:
        print("\n‚ùå Setup th·∫•t b·∫°i! Vui l√≤ng ki·ªÉm tra logs.")
        sys.exit(1)

if __name__ == "__main__":
    main()
